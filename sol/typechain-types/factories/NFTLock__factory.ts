/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { NFTLock, NFTLockInterface } from "../NFTLock";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "isLocked",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506101db806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063f6aacfb114610030575b600080fd5b61004a60048036038101906100459190610125565b610060565b604051610057919061015d565b60405180910390f35b600061008e7fe31dce3c9304449df2695ca8628b49b3efbacc5beecb392e15c1ba1c8c8faf5360001b61010d565b6100ba7f5a8e712d73bb8b6e5fc0c9b15e0718bb788f7e5f974bfc12f1dd5ad849a84b1460001b61010d565b6100e67f554a9eff71158f5b548e132702a9bdb9e06844a4a4c39b0deb31aba361752da060001b61010d565b60008083815260200190815260200160002060009054906101000a900460ff169050919050565b50565b60008135905061011f8161018e565b92915050565b60006020828403121561013757600080fd5b600061014584828501610110565b91505092915050565b61015781610178565b82525050565b6000602082019050610172600083018461014e565b92915050565b60008115159050919050565b6000819050919050565b61019781610184565b81146101a257600080fd5b5056fea2646970667358221220673fe111f5289522b792a43f44a01f28ad6482db4d95be06712f8a3822e0b80664736f6c63430008040033";

type NFTLockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: NFTLockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class NFTLock__factory extends ContractFactory {
  constructor(...args: NFTLockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "NFTLock";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<NFTLock> {
    return super.deploy(overrides || {}) as Promise<NFTLock>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): NFTLock {
    return super.attach(address) as NFTLock;
  }
  connect(signer: Signer): NFTLock__factory {
    return super.connect(signer) as NFTLock__factory;
  }
  static readonly contractName: "NFTLock";
  public readonly contractName: "NFTLock";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): NFTLockInterface {
    return new utils.Interface(_abi) as NFTLockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): NFTLock {
    return new Contract(address, _abi, signerOrProvider) as NFTLock;
  }
}
