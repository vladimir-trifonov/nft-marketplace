/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace IMarket {
  export type OfferStruct = {
    id: BigNumberish;
    offeror: string;
    price: BigNumberish;
  };

  export type OfferStructOutput = [BigNumber, string, BigNumber] & {
    id: BigNumber;
    offeror: string;
    price: BigNumber;
  };

  export type TokenStruct = {
    tokenId: BigNumberish;
    collectionId: BigNumberish;
    owner: string;
    forSale: boolean;
    price: BigNumberish;
    offersCount: Counters.CounterStruct;
  };

  export type TokenStructOutput = [
    BigNumber,
    BigNumber,
    string,
    boolean,
    BigNumber,
    Counters.CounterStructOutput
  ] & {
    tokenId: BigNumber;
    collectionId: BigNumber;
    owner: string;
    forSale: boolean;
    price: BigNumber;
    offersCount: Counters.CounterStructOutput;
  };
}

export declare namespace Counters {
  export type CounterStruct = { _value: BigNumberish };

  export type CounterStructOutput = [BigNumber] & { _value: BigNumber };
}

export interface IMarketInterface extends utils.Interface {
  contractName: "IMarket";
  functions: {
    "acceptOffer(uint256,uint256)": FunctionFragment;
    "buyToken(uint256,uint256)": FunctionFragment;
    "createCollection(uint256)": FunctionFragment;
    "fetchTokenOffers(uint256)": FunctionFragment;
    "fetchTokensBatch(uint256[])": FunctionFragment;
    "listTokenForSale(uint256)": FunctionFragment;
    "makeOffer(uint256)": FunctionFragment;
    "mintToken(uint256,uint256)": FunctionFragment;
    "withdraw()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "acceptOffer",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buyToken",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createCollection",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fetchTokenOffers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fetchTokensBatch",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "listTokenForSale",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "makeOffer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintToken",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "acceptOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buyToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createCollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fetchTokenOffers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fetchTokensBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "listTokenForSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "makeOffer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "CollectionCreated(address,uint256)": EventFragment;
    "OfferAccepted(address,address,uint256,uint256,uint256)": EventFragment;
    "OfferCreated(address,address,uint256,uint256,uint256)": EventFragment;
    "TokenListedForSale(address,uint256)": EventFragment;
    "TokenMinted(address,uint256,uint256,uint256)": EventFragment;
    "TokenSold(address,address,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CollectionCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OfferAccepted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OfferCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenListedForSale"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenMinted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenSold"): EventFragment;
}

export type CollectionCreatedEvent = TypedEvent<
  [string, BigNumber],
  { owner: string; collectionId: BigNumber }
>;

export type CollectionCreatedEventFilter =
  TypedEventFilter<CollectionCreatedEvent>;

export type OfferAcceptedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber],
  {
    seller: string;
    buyer: string;
    tokenId: BigNumber;
    offerId: BigNumber;
    price: BigNumber;
  }
>;

export type OfferAcceptedEventFilter = TypedEventFilter<OfferAcceptedEvent>;

export type OfferCreatedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber],
  {
    seller: string;
    offeror: string;
    tokenId: BigNumber;
    offerId: BigNumber;
    price: BigNumber;
  }
>;

export type OfferCreatedEventFilter = TypedEventFilter<OfferCreatedEvent>;

export type TokenListedForSaleEvent = TypedEvent<
  [string, BigNumber],
  { seller: string; tokenId: BigNumber }
>;

export type TokenListedForSaleEventFilter =
  TypedEventFilter<TokenListedForSaleEvent>;

export type TokenMintedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  {
    owner: string;
    collectionId: BigNumber;
    tokenId: BigNumber;
    price: BigNumber;
  }
>;

export type TokenMintedEventFilter = TypedEventFilter<TokenMintedEvent>;

export type TokenSoldEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber],
  {
    seller: string;
    buyer: string;
    tokenId: BigNumber;
    collectionId: BigNumber;
    price: BigNumber;
  }
>;

export type TokenSoldEventFilter = TypedEventFilter<TokenSoldEvent>;

export interface IMarket extends BaseContract {
  contractName: "IMarket";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IMarketInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptOffer(
      _tokenId: BigNumberish,
      _offerId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    buyToken(
      _tokenId: BigNumberish,
      _collectionId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createCollection(
      _collectionId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fetchTokenOffers(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[IMarket.OfferStructOutput[]]>;

    fetchTokensBatch(
      _tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[IMarket.TokenStructOutput[]]>;

    listTokenForSale(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    makeOffer(
      _tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintToken(
      _tokenId: BigNumberish,
      _collectionId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  acceptOffer(
    _tokenId: BigNumberish,
    _offerId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  buyToken(
    _tokenId: BigNumberish,
    _collectionId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createCollection(
    _collectionId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fetchTokenOffers(
    _tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<IMarket.OfferStructOutput[]>;

  fetchTokensBatch(
    _tokenIds: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<IMarket.TokenStructOutput[]>;

  listTokenForSale(
    _tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  makeOffer(
    _tokenId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintToken(
    _tokenId: BigNumberish,
    _collectionId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptOffer(
      _tokenId: BigNumberish,
      _offerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    buyToken(
      _tokenId: BigNumberish,
      _collectionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createCollection(
      _collectionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    fetchTokenOffers(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<IMarket.OfferStructOutput[]>;

    fetchTokensBatch(
      _tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<IMarket.TokenStructOutput[]>;

    listTokenForSale(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    makeOffer(_tokenId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    mintToken(
      _tokenId: BigNumberish,
      _collectionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "CollectionCreated(address,uint256)"(
      owner?: string | null,
      collectionId?: null
    ): CollectionCreatedEventFilter;
    CollectionCreated(
      owner?: string | null,
      collectionId?: null
    ): CollectionCreatedEventFilter;

    "OfferAccepted(address,address,uint256,uint256,uint256)"(
      seller?: string | null,
      buyer?: string | null,
      tokenId?: BigNumberish | null,
      offerId?: null,
      price?: null
    ): OfferAcceptedEventFilter;
    OfferAccepted(
      seller?: string | null,
      buyer?: string | null,
      tokenId?: BigNumberish | null,
      offerId?: null,
      price?: null
    ): OfferAcceptedEventFilter;

    "OfferCreated(address,address,uint256,uint256,uint256)"(
      seller?: string | null,
      offeror?: string | null,
      tokenId?: BigNumberish | null,
      offerId?: null,
      price?: null
    ): OfferCreatedEventFilter;
    OfferCreated(
      seller?: string | null,
      offeror?: string | null,
      tokenId?: BigNumberish | null,
      offerId?: null,
      price?: null
    ): OfferCreatedEventFilter;

    "TokenListedForSale(address,uint256)"(
      seller?: string | null,
      tokenId?: BigNumberish | null
    ): TokenListedForSaleEventFilter;
    TokenListedForSale(
      seller?: string | null,
      tokenId?: BigNumberish | null
    ): TokenListedForSaleEventFilter;

    "TokenMinted(address,uint256,uint256,uint256)"(
      owner?: string | null,
      collectionId?: BigNumberish | null,
      tokenId?: null,
      price?: null
    ): TokenMintedEventFilter;
    TokenMinted(
      owner?: string | null,
      collectionId?: BigNumberish | null,
      tokenId?: null,
      price?: null
    ): TokenMintedEventFilter;

    "TokenSold(address,address,uint256,uint256,uint256)"(
      seller?: string | null,
      buyer?: string | null,
      tokenId?: BigNumberish | null,
      collectionId?: null,
      price?: null
    ): TokenSoldEventFilter;
    TokenSold(
      seller?: string | null,
      buyer?: string | null,
      tokenId?: BigNumberish | null,
      collectionId?: null,
      price?: null
    ): TokenSoldEventFilter;
  };

  estimateGas: {
    acceptOffer(
      _tokenId: BigNumberish,
      _offerId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    buyToken(
      _tokenId: BigNumberish,
      _collectionId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createCollection(
      _collectionId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fetchTokenOffers(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fetchTokensBatch(
      _tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    listTokenForSale(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    makeOffer(
      _tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintToken(
      _tokenId: BigNumberish,
      _collectionId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptOffer(
      _tokenId: BigNumberish,
      _offerId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    buyToken(
      _tokenId: BigNumberish,
      _collectionId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createCollection(
      _collectionId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fetchTokenOffers(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fetchTokensBatch(
      _tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    listTokenForSale(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    makeOffer(
      _tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintToken(
      _tokenId: BigNumberish,
      _collectionId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
